@using CheckersGame.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.Extensions.DependencyInjection
@using AngleSharp.Dom
@using Bunit
@using Bunit.TestDoubles
@using Xunit.Abstractions

@code
{
    //skapa två blayer list objekt av klassen Checker
    List<Checker> blackCheckers = new List<Checker>();
    List<Checker> redCheckers = new List<Checker>();


    protected override void OnInitialized()
    {

        blackCheckers.Clear();
        redCheckers.Clear();
        winnerTest();
        scoreTest();
        redTurn = true;

        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {

                blackCheckers.Add(new Checker
					{
						Color = "black",
						Column = j,
						Row = i,
						Direction = CheckersDirection.Down
					});
            }
        }
        int iji = 0;
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                Console.WriteLine("forloop: " + iji + " " + "rad nummer:  " + " " + i + " " + "vita positionsnummer: " + j);
                iji++;

                redCheckers.Add(new Checker
					{
						Color = "red",
						Column = j,
						Row = i,
						Direction = CheckersDirection.Up
					});
            }
        }
    }

    Checker activeChecker = null;
    //skapa possible list int objekt
    List<(int row, int column)> cellsPossible = new();
    //skapa possible metod objekt
    void EvalueCheckerSpots()
    {
        cellsPossible.Clear();
        if (activeChecker != null)
        {
            List<int> rowsPossible = new List<int>();
            if(activeChecker.Direction == CheckersDirection.Down ||
                activeChecker.Direction == CheckersDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row + 1);
            }
            if(activeChecker.Direction == CheckersDirection.Up ||
                        activeChecker.Direction == CheckersDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row - 1);
            }
            foreach(var row in rowsPossible)
            {
                EvaluateSpot(row, activeChecker.Column - 1);
                EvaluateSpot(row, activeChecker.Column + 1);

            };
        }
    }
    //kolla om det är possible eller inte
    void EvaluateSpot(int row, int column, bool firstTime = true)
    {
        var blackChecker = blackCheckers.FirstOrDefault(
            n => n.Column == column && n.Row == row);

        var redChecker = redCheckers.FirstOrDefault(
            n => n.Column == column && n.Row == row);


        if(blackChecker == null && redChecker == null)
        {
            cellsPossible.Add((row, column));
        }
        else if (firstTime)
        {
            // can i jump this checker?
            if((redTurn && blackChecker != null) ||
                        (!redTurn && redChecker != null))
            {
                int columnDifference = column - activeChecker.Column;
                int rowDifference = row - activeChecker.Row;
                EvaluateSpot(row + rowDifference, column + columnDifference, false);
            }
        }
    }
    //Om det är possible ta bort en pjäs
    void MoveChecker(int row, int column)
    {
        bool canMoveHere = cellsPossible.Contains((row, column));
        if (!canMoveHere)
            return;
        if(Math.Abs(activeChecker.Column - column) == 2)
        {
            // we jumped somthing
            int jumpedColumn = (activeChecker.Column + column) / 2;
            int jumpedRow = (activeChecker.Row + row) / 2;
            var blackChecker = blackCheckers.FirstOrDefault(
                n => n.Row == jumpedRow && n.Column == jumpedColumn);
            if (blackChecker != null)
            {
                blackCheckers.Remove(blackChecker);
                redScore++;
                if(redScore == 12)
                {
                    winner = "Congratulations! Red player Win!";
                }

            }
            var redChecker = redCheckers.FirstOrDefault(
                n => n.Row == jumpedRow && n.Column == jumpedColumn);
            if (redChecker != null)
            {
                redCheckers.Remove(redChecker);
                blackScore++;
                if (blackScore == 12)
                {
                    winner = "Congratulations! Black player Win!";
                }

            }


        }
        activeChecker.Column = column;
        activeChecker.Row = row;

        if(activeChecker.Row == 0 && activeChecker.Color == "red")
        {
            activeChecker.Direction = CheckersDirection.Both;
        }
        if (activeChecker.Row == 7 && activeChecker.Color == "black")
        {
            activeChecker.Direction = CheckersDirection.Both;
        }

        activeChecker = null;
        redTurn = !redTurn;
        EvalueCheckerSpots();
    }
    //kolla vem spelar
    void CheckerClicked(Checker checker)
    {
        if (redTurn && checker.Color == "black")
            return;
        if (!redTurn && checker.Color == "red")
            return;
        activeChecker = checker;

        EvalueCheckerSpots();
    }
    bool redTurn = true;

    //test parameter
    [Parameter]
    public int score { get; set; } = 0;
    //score variablar
    int blackScore = 0;
    int redScore = 0;
    private void scoreTest()
    {
        blackScore = score;
        redScore = score;
    }
    //test parameter
    [Parameter]
    public string winnerT { get; set; } = "";
    //vinnare variabel
    private string winner = "";
    private void winnerTest()
    {
        winner = winnerT;
    }

    

}


@*Starta om spelet*@

<button class="btn btn-dark" @onclick="OnInitialized">Reset</button>


@*spelet*@
<div class="d-flex justify-content-center">

	<div>
        <div class="d-flex justify-content-center">
            <h2 class="winner-str">@winner</h2>
        </div>
        
        <div class="d-flex align-items-center justify-content-around mb-1 mt-4">
            <div class="blackScore checkerScore d-flex align-items-center justify-content-center"><span class="blackSpelare">@blackScore</span></div>
                <h3>Checkersboard</h3>
            <div class="redScore checkerScore d-flex align-items-center justify-content-center"><span>@redScore</span></div>
        </div>
        @*loppa 8 row divar*@
		@for (int i = 0; i < 8; i++)
		{
			int localI = i;
            <div class="row">
                @*loppa 8 column divar i varje row*@
			@for (int j = 0; j < 8; j++)
			{
					int localJ = j;
                    @*Positions värde*@
					var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
					if (checker == null)
					{
						checker = redCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
					}
					bool canMoveHere = cellsPossible.Contains((i, j));

					<div @onclick=" () => MoveChecker(localI, localJ)" class="cell @(canMoveHere ? "active" : "")">
						@if(checker != null)
						{
                            @*spelpjäser*@
                            <div @onclick="() => CheckerClicked(checker)"
					        class="checker @checker.Color @(checker == activeChecker ? "active" : "")">                                
					        <span>@(checker.Direction == CheckersDirection.Both ? "K" : "")</span>
					        </div>                           
						}
					</div>
			}
		    </div>

		}


	</div>

</div>






